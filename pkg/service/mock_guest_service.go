// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/guest_service_interface.go

// Package service is a generated GoMock package.
package service

import (
	reflect "reflect"

	model "github.com/fpetrikovich/go-guestlist/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIGuestService is a mock of IGuestService interface.
type MockIGuestService struct {
	ctrl     *gomock.Controller
	recorder *MockIGuestServiceMockRecorder
}

// MockIGuestServiceMockRecorder is the mock recorder for MockIGuestService.
type MockIGuestServiceMockRecorder struct {
	mock *MockIGuestService
}

// NewMockIGuestService creates a new mock instance.
func NewMockIGuestService(ctrl *gomock.Controller) *MockIGuestService {
	mock := &MockIGuestService{ctrl: ctrl}
	mock.recorder = &MockIGuestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGuestService) EXPECT() *MockIGuestServiceMockRecorder {
	return m.recorder
}

// CreateGuest mocks base method.
func (m *MockIGuestService) CreateGuest(params *model.GuestData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGuest", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGuest indicates an expected call of CreateGuest.
func (mr *MockIGuestServiceMockRecorder) CreateGuest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGuest", reflect.TypeOf((*MockIGuestService)(nil).CreateGuest), params)
}

// DeleteGuest mocks base method.
func (m *MockIGuestService) DeleteGuest(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGuest", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGuest indicates an expected call of DeleteGuest.
func (mr *MockIGuestServiceMockRecorder) DeleteGuest(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGuest", reflect.TypeOf((*MockIGuestService)(nil).DeleteGuest), name)
}

// GetArrivedGuests mocks base method.
func (m *MockIGuestService) GetArrivedGuests() ([]model.GuestArrival, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArrivedGuests")
	ret0, _ := ret[0].([]model.GuestArrival)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArrivedGuests indicates an expected call of GetArrivedGuests.
func (mr *MockIGuestServiceMockRecorder) GetArrivedGuests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArrivedGuests", reflect.TypeOf((*MockIGuestService)(nil).GetArrivedGuests))
}

// GetGuest mocks base method.
func (m *MockIGuestService) GetGuest(name string) (*model.Guest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuest", name)
	ret0, _ := ret[0].(*model.Guest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuest indicates an expected call of GetGuest.
func (mr *MockIGuestServiceMockRecorder) GetGuest(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuest", reflect.TypeOf((*MockIGuestService)(nil).GetGuest), name)
}

// GetGuestList mocks base method.
func (m *MockIGuestService) GetGuestList() ([]model.GuestData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuestList")
	ret0, _ := ret[0].([]model.GuestData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuestList indicates an expected call of GetGuestList.
func (mr *MockIGuestServiceMockRecorder) GetGuestList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuestList", reflect.TypeOf((*MockIGuestService)(nil).GetGuestList))
}

// UpdateGuest mocks base method.
func (m *MockIGuestService) UpdateGuest(params *model.GuestData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGuest", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGuest indicates an expected call of UpdateGuest.
func (mr *MockIGuestServiceMockRecorder) UpdateGuest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGuest", reflect.TypeOf((*MockIGuestService)(nil).UpdateGuest), params)
}
